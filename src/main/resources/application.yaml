spring:jpa:
    database: postgresql
    hibernate.dialect: org.hibernate.dialect.PostgreSQLdialect
    hibernate:
      ddl-auto: update
    properties.hibernate.format_sql: true
    show-sql: true

spring.datasource:
    hikari:
      maximum-pool-size: 4  # 커넥션을 맺는데 몇개의 커넥션을 맺을지
    url: jdbc:postgresql://ec2-44-199-9-102.compute-1.amazonaws.com/d3ecpt2ridid08
    username: llutqssvvjankr
    password: ${{ secrets.POSTGRESQL_PASSWORD }}
    platfrom: postgres
    driver-class-name: org.postgresql.Driver

jwt:
  secret-key: jeongtaekgyu.sns-application-2022.secret_key
  # 30 days
  token:
    expired-time-ms: 2592000000

spring.redis:
  url: ${{ secrets.REDIS_URI }}

spring:
  kafka:
    properties:
      # cloudkarafka 설정
      security.protocol: SASL_SSL
      sasl.mechanism: SCRAM-SHA-256
      sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="k25pxplc" password="${{ secrets.KAFKA_PASSWORD }}";
    consumer:
      properties.spring.json.trusted.packages: "*" # json으로 변환을 할 때 serialize, deserializer할 때 어떤 패키지를 trust하고 허용할 것인지
      bootstrap-servers: dory-01.srvs.cloudkafka.com:9094, dory-02.srvs.cloudkafka.com:9094, dory-03.srvs.cloudkafka.com:9094
      group-id: alarm # consumer의 group-id를 구독한다.
      auto-offset-reset: latest  # 브로커에 쌓여있는 메시지들을 차례대로 읽은 건지 마지막에 있는 메시지를 읽을 건지에 대한 옵션
      key-deserializer: org.apache.kafka.common.serialization.IntegerDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    listener:
      ack-mode: MANUAL # 수동으로 ack를 날린다.
    producer:
      bootstrap-servers: dory-01.srvs.cloudkafka.com:9094, dory-02.srvs.cloudkafka.com:9094, dory-03.srvs.cloudkafka.com:9094
      key-serializer: org.apache.kafka.common.serialization.IntegerSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties.enable.idempotence: false # cloudkarafka 설정
    topic:
      alarm: k25pxplc-test

